---
const { headings, maxLevel = 3 } = Astro.props;
const toc = buildToc(headings);
function buildToc(headings: any) {
    const _toc: any = [];
    const parentHeadings = new Map();
    (headings || []).forEach((h: any) => {
        const heading = { ...h, subheadings: [] };
        parentHeadings.set(heading.depth, heading);
        if (heading.depth === 2) {
            _toc.push(heading);
        } else {
            if (maxLevel > 2) {
                parentHeadings.get(heading.depth - 1)?.subheadings?.push(heading);
            }
        }
    });
    return _toc;
}
---

<nav class='toc sticky top-4 py-2 lg:-ml-3' aria-label="Table of contents">
    <h3 class='font-extrabold uppercase mb-1 px-3 text-sm'>On This Page</h3>
    <ul class='toc-list max-h-[calc(100vh-70px)] overflow-auto text-[.825rem] text-[var(--color-content-secondary)]'>
        {
            toc.map((heading: any) => (
                <li>
                    <a
                        class='toc-link block font-bold py-1.5 px-3 border-l-2 border-transparent text-inherit leading-tight text-zinc-700 dark:text-zinc-300 transition-colors'
                        href={'#' + heading.slug}
                        data-toc-slug={heading.slug}
                    >
                        {heading.text}
                    </a>
                    {heading.subheadings?.length > 0 && (
                        <ul>
                            {heading.subheadings.map((subheading: any) => (
                                <li>
                                    <a
                                        class='toc-link block py-1.5 pl-7 pr-3 border-l-2 border-transparent text-inherit leading-tight text-zinc-700 dark:text-zinc-300 transition-colors'
                                        href={'#' + subheading.slug}
                                        data-toc-slug={subheading.slug}
                                    >
                                        {subheading.text}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    )}
                </li>
            ))
        }
    </ul>
</nav>
<script type="module">
    // Highlight active section in TOC
    if (typeof window !== "undefined") {
        const tocLinks = document.querySelectorAll('.toc-link');
        const headingEls = Array.from(tocLinks).map(link => {
            const id = link.getAttribute('href')?.slice(1);
            return document.getElementById(id);
        });
        function onScroll() {
            let activeIdx = 0;
            for (let i = 0; i < headingEls.length; i++) {
                if (headingEls[i] && headingEls[i].getBoundingClientRect().top < 120) {
                    activeIdx = i;
                }
            }
            tocLinks.forEach((link, idx) => {
                if (idx === activeIdx) {
                    link.classList.add('active-toc');
                    link.setAttribute('aria-current', 'location');
                } else {
                    link.classList.remove('active-toc');
                    link.removeAttribute('aria-current');
                }
            });
        }
        window.addEventListener('scroll', onScroll, { passive: true });
        onScroll();
    }
</script>
<style>
    .toc-list::-webkit-scrollbar {
        width: 5px;
    }
    .toc-list::-webkit-scrollbar-track {
        background: transparent;
    }
    .toc-list::-webkit-scrollbar-thumb {
        background: #eeeeee;
        border-radius: 5px;
    }
    :global(.dark) .toc-list::-webkit-scrollbar-thumb {
        background: #2e2e2e;
    }
    .toc-link.active-toc {
        border-left-color: #00E0E0;
        color: #005353;
        background: rgba(0,224,224,0.08);
        font-weight: 700;
    }
    :global(.dark) .toc-link.active-toc {
        border-left-color: #00E0E0;
        color: #00E0E0;
        background: rgba(0,224,224,0.10);
    }
    .toc-link {
        scroll-behavior: smooth;
    }
</style>
