---
import { type CollectionEntry, getCollection } from "astro:content";
import Prose from "../components/Prose.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import FormattedDate from "../components/FormattedDate.astro";
import AboutTheAuthor from "../components/widgets/AboutTheAuthor.astro";
import TableOfContent from "../components/widgets/TableOfContent.astro";
import TLDR from "../components/widgets/TLDR.astro";
import { slugify, calculateReadingTime } from "../utils";
import { loadEnv } from "vite";

const { GISCUS_REPO, GISCUS_REPO_ID, GISCUS_CATEGORY, GISCUS_CATEGORY_ID } =
  loadEnv(process.env.NODE_ENV || "production", process.cwd(), "");

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post: any) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;
const post = Astro.props;
const {
  data: {
    title,
    seoTitle,
    description,
    coverImage,
    pubDate,
    updatedDate,
    tags,
    tldr,
    canonicalUrl,
  },
} = post;
const { Content, headings } = await post.render();
const readingTime = calculateReadingTime(post.body);
---

<BaseLayout
  title={seoTitle || title}
  description={description}
  image={coverImage?.src || undefined}
  canonicalUrl={canonicalUrl}
>
  <div class="container lg:flex gap-10">
    <main class="overflow-hidden grow">
      <article>
        <Prose>
          <div>
            <h1 class="!my-1 leading-tight">{title}</h1>

            <!-- Post metadata -->
            <div
              class="flex flex-wrap items-center justify-between gap-4 mt-4 mb-6"
            >
              <!-- Left side: Tags -->
              <div class="flex flex-wrap gap-2">
                {
                  (tags || [])?.map((tag: string) => (
                    <a
                      class="inline-flex px-3 py-1 text-sm bg-zinc-100 dark:bg-zinc-800 
                    text-zinc-600 dark:text-zinc-400 rounded-full no-underline 
                    hover:bg-[#005353] dark:hover:bg-[#00E0E0] hover:text-white 
                    dark:hover:text-zinc-900 transition-all duration-300"
                      href={`/tags/${slugify(tag)}`}
                    >
                      {tag}
                    </a>
                  ))
                }
              </div>

              <!-- Right side: Reading time and dates -->
              <div
                class="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-zinc-600 dark:text-zinc-400"
              >
                <div
                  class="inline-flex items-center gap-1.5 px-3 py-1 bg-zinc-100 dark:bg-zinc-800 rounded-full"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="14"
                    height="14"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="text-[#00a7a7]"
                  >
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12 6 12 12 16 14"></polyline>
                  </svg>
                  <span>{readingTime} min read</span>
                </div>
                <span>Posted on <FormattedDate date={pubDate} /></span>
                {
                  updatedDate && (
                    <span>
                      Updated on <FormattedDate date={updatedDate} />
                    </span>
                  )
                }
              </div>
            </div>

            <!-- Canonical URL -->
            {
              canonicalUrl && (
                <div class="text-sm text-zinc-600 dark:text-zinc-400 mb-6">
                  Originally published at{" "}
                  <a
                    href={canonicalUrl}
                    class="text-[#005353] dark:text-[#00E0E0] no-underline hover:opacity-80 transition-opacity"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    {new URL(canonicalUrl).hostname}
                  </a>
                </div>
              )
            }

            <!-- Cover Image -->
            {
              coverImage && (
                <div class="mb-6">
                  <Image
                    class="rounded-2xl w-full"
                    src={coverImage}
                    alt={title}
                    loading="eager"
                  />
                </div>
              )
            }

            <!-- Content -->
            <TLDR summary={tldr} />
            <Content />
          </div>
        </Prose>

        <!-- Comments -->
        {
          GISCUS_REPO && (
            <script
              id="giscus-script"
              is:inline
              src="https://giscus.app/client.js"
              data-repo={GISCUS_REPO}
              data-repo-id={GISCUS_REPO_ID}
              data-category={GISCUS_CATEGORY}
              data-category-id={GISCUS_CATEGORY_ID}
              data-mapping="pathname"
              data-strict="0"
              data-reactions-enabled="1"
              data-emit-metadata="0"
              data-input-position="bottom"
              data-theme="preferred_color_scheme"
              data-lang="en"
              crossorigin="anonymous"
              async
            />
          )
        }
      </article>
    </main>

    <div class="shrink-0 w-[280px] hidden md:block">
      <div class="mb-4">
        <AboutTheAuthor />
      </div>
      <TableOfContent headings={headings} />
    </div>
  </div>
</BaseLayout>

<script>
  function observeToc() {
    const anchors = document.querySelectorAll(".prose h2[id], .prose h3[id]");
    const links = document.querySelectorAll("nav.toc ul li a");

    if (anchors && links) {
      let scrollTop = window.scrollY;

      // highlight the last scrolled-to: set everything inactive first
      for (const link of links) {
        link.classList.add("border-transparent", "text-inherit");
        link.classList.remove(
          "bg-[var(--background-surface-color)]",
          "border-[var(--soft-border-color)]",
          "text-[var(--link-color)]"
        );
      }
      // then iterate backwards, on the first match highlight it and break
      for (var i = anchors.length - 1; i >= 0; i--) {
        const anchor = anchors[i] as HTMLElement;
        if (scrollTop > anchor.offsetTop - 80) {
          links[i].classList.remove("border-transparent", "text-inherit");
          links[i].classList.add(
            "bg-[var(--background-surface-color)]",
            "border-[var(--soft-border-color)]",
            "text-[var(--link-color)]"
          );
          break;
        }
      }
    }
  }

  window.addEventListener("scroll", observeToc);
  window.addEventListener("hashchange", observeToc);
</script>
